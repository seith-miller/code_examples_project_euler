'''
Highly divisible triangular number
Problem 12

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

import math

max_divisors = 500

max_loops = 13000


def solver():
    most_divs_found = 0

    x = 0
    while True:
        next_tri_num = cal_tri_nums(x)

        result = len(list(div_gen(next_tri_num)))

        if result > most_divs_found:
            most_divs_found = result

            msg = "tri_num: %s, tri_index: %s, divs: %s" % (next_tri_num, x, result)
            print(msg)

        if result >= max_divisors:
            return next_tri_num
        elif x > max_loops:
            raise MaxLoopsException("max_loops reached")

        x += 1


def cal_tri_nums(x):
    # return the value of T sub x
    my_tri_num = (x * (x + 1)) // 2
    return my_tri_num


def div_gen(n):
    sqrt_of_n = math.sqrt(n)

    for i in range(1, int(sqrt_of_n + 1)):
        if n % i == 0:
            yield i
            if i != sqrt_of_n:
                yield n // i


class MaxLoopsException(Exception):
    pass


def main():
    print(solver())


if __name__ == '__main__':
    main()
